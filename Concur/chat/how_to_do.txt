
聊天室思路分析~
1.需求分析:

2.技術點確定:
    * 數據如何發送
        => 轉發: 客戶端發出 --> 服務器 --> 轉發給其他用戶
    * 網絡模型如何構建
        => UDP 網絡模型
    * 用戶訊息如何維護
        => 服務端保存: 甚麼地方會用，需要甚麼特徵，存甚麼。
        --------------> 列表 [(name,address)] / 字典 {name:address} /
        --------------> 鏈表 class Node:
        -------------->           def __init__(self, name, address, next):
        -------------->                                       pass
    * 聊天室的隨意收發如何處理
        => 多進程進行收發操作

3.結構設計
    封裝設計:
        => 函數式編程
    功能模塊劃分:
        =>  網路結構搭架
        =>  進入/退出聊天室

        =>  聊天
        =>  管理員消息

4. 每個功能客戶端分服務端分別做甚麼
    * 網路功能搭建
    * 進入/退出聊天室
            客戶端
                * 輸入姓名
                * 服務器發送請求
                * 接受反饋結果
                * 如果不允許進入則重複輸入姓名
            服務端
                * 接收請求
                * 判斷用戶名是否存在
                * 反饋結果
                * 如果允許進入，保存用戶訊息，通知其他人。
    * 聊天
        客戶端
            * 創建新的進程
            * 一個進程收消息
            * 進程發消息
        服務端
            * 接收請求，判斷請求類型
            * 將消息轉發給其他人
    * 退出:
        客戶端
            * 輸入 quit or X，表示退出
            * 發送請求給服務器
            * 結束進程
        服務器
            * 接收請求，判斷請求類型
            * 刪除用戶
            * 將退出訊息告知其他人
5. 登入協議
    登入: L name  OK 表示可以登入
    聊天: C name  xxxxx
    退出: Q name